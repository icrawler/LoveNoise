{"name":"Lovenoise","tagline":"A Noise Library for LOVE","body":"# LoveNoise - a Love Noise library\r\n\r\n__LoveNoise__ is a wrapper library for LOVE's noise functions.\r\n\r\nSyntax is based on [Libnoise](http://libnoise.sourceforge.net/), a noise library written in C++.\r\n\r\nCurrently only includes Simplex noise as its core noise function. Used for all the other types of noise.\r\n\r\nInstallation\r\n------------\r\n\r\nThe `lovenoise.lua` and `presets.lua` files, the `lovenoise` and the `third-party` folder should be dropped into an existing project. After that, add this line ontop of your files that uses lovenoise.\r\n\r\n```lua\r\nlocal lovenoise = require \"lovenoise\"\r\n````\r\n\r\nExamples\r\n--------\r\n\r\nCreating a 3 new modules and getting the final value:\r\n```lua\r\n-- Require lovenoise first\r\nlocal lovenoise = require 'lovenoise'\r\n\r\n-- Reference lovenoise.modules (optional)\r\nlocal modules = lovenoise.modules\r\n\r\n-- Creating a new Simplex module\r\nlocal simplexMod = modules.Simplex:new()\r\n\r\n-- Setting its properties (see doc)\r\nsimplexMod:setFrequency(0.01)\r\nsimplexMod:setSeed(math.random()*600)\r\n\r\n-- Creating a new RidgedMulti module with 4 octaves (with condensed property setters)\r\nlocal ridgedMod = modules.RidgedMulti:new(4):setFrequency(0.01):setSeed(math.random()*600)\r\n\r\n-- Creating a new Min module with the previous modules as its sources\r\nlocal minMod = modules.Min:new(ridgedMod, simplexMod)\r\n\r\n-- Getting a value at location [5, 6]\r\nlocal val = modules.Min:getValue(5, 6)\r\n````\r\n\r\nUse for other frameworks\r\n------------------------\r\n\r\nYou can use this library for other frameworks, just change the `lnoise` function in line 2 of the presets.lua file to the noise function of your choice (currently uses LOVE's Simplex Noise generator.)\r\n\r\nDocumentation\r\n-------------\r\n\r\n### Module superclass\r\n\r\nFunctions:\r\n* `:new()` -- Creates a new module (usually overridden by subclass.)\r\n* `:addSource(index, source)` -- Adds a source module at a specified index. Indices are one-based.\r\n* `:getValue(x, [y, z, w])` -- Gets the value of the module at a specified location (overridden by subclass.) Values usually range from -1 to 1.\r\n\r\n### NoiseModule superclass\r\n\r\nFunctions:\r\n* `:new(seed, frequency)` -- Creates a new noise module with a specified seed and frequency (overridden by subclass.)\r\n* `:getValue(x, [y, z, w])` -- Gets the value of the module at a specified location (overridden by subclass.) Values usually range from -1 to 1.\r\n* `:setSeed(seed)` -- Sets the seed of the noise module.\r\n* `:setFrequency(frequency)` -- Sets the frequency of the noise module. Positive values equal or larger than 1 gives pseudo-random white noise while positive values less than 1 gives smoother noise values.\r\n\r\n### Fractal module\r\n\r\nInherits from NoiseModule.\r\n\r\nFunctions:\r\n* `:new(octaves, lacunarity, persistence, seed, frequency)` -- Creates a new Fractal module with a specified number of octaves, lacunarity, persistence, seed and frequency.\r\n* `:setOctaves(octaves)` -- Sets the amount of octaves. Higher values means more detailed noise.\r\n* `:setLacunarity(lacunarity)` -- Sets the lacunarity factor (from 0 to 1.) Determines how quickly the frequency increases.\r\n* `:setPersistence(persistence)` -- Sets the persistence factor (from 0 to 1.) Determines how quickly the amplitude diminishes.\r\n\r\n### RidgedMulti module\r\n\r\nInherits from Fractal.\r\n\r\nGenerates [Ridged Fractal](http://libnoise.sourceforge.net/docs/classnoise_1_1module_1_1RidgedMulti.html) noise.\r\n\r\n### Billow module\r\n\r\nInherits from Fractal.\r\n\r\nGenerates [Billow](http://libnoise.sourceforge.net/docs/classnoise_1_1module_1_1Billow.html) noise.\r\n\r\n### Add module\r\n\r\nInherits from Module.\r\n\r\nFunctions:\r\n* `:new(source1, source2)` -- Creates a new Add module with the specified two sources.\r\n* `:getValue(x, [y, z, w])` -- Gets the combined values of the two sources at the specified location.\r\n\r\n### Max module\r\n\r\nInherits from Module. Similar to Add but returns the maximum value of the two sources.\r\n\r\n### Min module\r\n\r\nInherits from Module. Similar to Add but returns the minimum value of the two sources.\r\n\r\n### Multiply module\r\n\r\nInherits from Module. Similar to Add but returns the multiplied values of the two sources.\r\n\r\n### Power module\r\n\r\nInherits from Module. Similar to Add but returns the value of the first source multiplied by the second source.\r\n\r\n### Invert module\r\n\r\nInherits from Module.\r\n\r\nFunctions\r\n* `new(source)` -- Creates a new Invert module with specified source.\r\n* `getValue(x, [y, z, w])` -- Returns the inverted value of the source.\r\n\r\n\r\nLicense\r\n-------\r\n\r\n\tMIT LICENSE\r\n\r\n\tCopyright (c) 2014 Phoenix Enero\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a\r\n\tcopy of this software and associated documentation files (the\r\n\t\"Software\"), to deal in the Software without restriction, including\r\n\twithout limitation the rights to use, copy, modify, merge, publish,\r\n\tdistribute, sublicense, and/or sell copies of the Software, and to\r\n\tpermit persons to whom the Software is furnished to do so, subject to\r\n\tthe following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included\r\n\tin all copies or substantial portions of the Software.\r\n\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\tOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n\tMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n\tIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n\tCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n\tTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n\tSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}